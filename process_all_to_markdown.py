#!/usr/bin/env python3
"""
Process all files in test_files folder and create one comprehensive markdown report.
"""

import os
from datetime import datetime
from documents_processor import batch_process_folder

def create_markdown_report():
    """Process all files and create a comprehensive markdown report."""
    
    print("🚀 Processing all files in test_files folder...")
    
    # Process all files in test_files folder (including subfolders)
    docs = batch_process_folder("test_files", return_docs=True)
    
    # Create markdown content
    markdown_content = []
    
    # Header
    markdown_content.append("# Documents Processing Report")
    markdown_content.append(f"**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    markdown_content.append(f"**Total Files Processed:** {len(docs)}")
    markdown_content.append("")
    
    # Table of Contents
    markdown_content.append("## 📋 Table of Contents")
    for i, doc in enumerate(docs, 1):
        file_name = doc['rel_path']
        anchor = file_name.replace('/', '-').replace('.', '-').lower()
        markdown_content.append(f"{i}. [{file_name}](#{anchor})")
    markdown_content.append("")
    
    # Process each document
    for i, doc in enumerate(docs, 1):
        file_name = doc['rel_path']
        file_ext = doc['file_ext']
        file_size = doc['file_size']
        text_content = doc['text_content']
        
        # Create anchor-friendly ID
        anchor_id = file_name.replace('/', '-').replace('.', '-').lower()
        
        markdown_content.append("---")
        markdown_content.append("")
        markdown_content.append(f"## {i}. {file_name} {{#{anchor_id}}}")
        markdown_content.append("")
        markdown_content.append("### 📄 File Information")
        markdown_content.append(f"- **File:** `{file_name}`")
        markdown_content.append(f"- **Type:** `{file_ext}`")
        markdown_content.append(f"- **Size:** {file_size:,} bytes")
        markdown_content.append("")
        
        # Add metadata if available
        if doc.get('metadata'):
            markdown_content.append("### 🔍 Metadata")
            for key, value in doc['metadata'].items():
                markdown_content.append(f"- **{key}:** {value}")
            markdown_content.append("")
        
        # Add extracted content
        markdown_content.append("### 📝 Extracted Content")
        markdown_content.append("")
        
        if text_content and text_content.strip():
            # Handle different content types
            if file_ext.lower() in ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff']:
                markdown_content.append("**🤖 AI Image Analysis:**")
                markdown_content.append("")
                markdown_content.append("```")
                markdown_content.append(text_content)
                markdown_content.append("```")
            else:
                markdown_content.append("```")
                markdown_content.append(text_content)
                markdown_content.append("```")
        else:
            markdown_content.append("*No text content extracted*")
        
        markdown_content.append("")
        
        # Add tables info if available
        if doc.get('tables'):
            markdown_content.append("### 📊 Extracted Tables")
            markdown_content.append(f"- **Tables found:** {len(doc['tables'])}")
            for table in doc['tables']:
                markdown_content.append(f"- `{table}`")
            markdown_content.append("")
    
    # Footer
    markdown_content.append("---")
    markdown_content.append("")
    markdown_content.append("## 📊 Processing Summary")
    markdown_content.append("")
    
    # Count by file type
    file_types = {}
    total_size = 0
    total_content_length = 0
    
    for doc in docs:
        ext = doc['file_ext'].lower()
        file_types[ext] = file_types.get(ext, 0) + 1
        total_size += doc['file_size']
        total_content_length += len(doc['text_content'])
    
    markdown_content.append("### File Types Processed")
    for ext, count in sorted(file_types.items()):
        markdown_content.append(f"- **{ext}:** {count} file{'s' if count > 1 else ''}")
    
    markdown_content.append("")
    markdown_content.append("### Statistics")
    markdown_content.append(f"- **Total Files:** {len(docs)}")
    markdown_content.append(f"- **Total Size:** {total_size:,} bytes ({total_size/1024:.1f} KB)")
    markdown_content.append(f"- **Total Extracted Text:** {total_content_length:,} characters")
    markdown_content.append(f"- **Average Content per File:** {total_content_length//len(docs) if docs else 0:,} characters")
    
    markdown_content.append("")
    markdown_content.append("---")
    markdown_content.append("*Generated by Documents Processor*")
    
    # Save to file
    output_file = "processed_documents/complete_processing_report.md"
    os.makedirs("processed_documents", exist_ok=True)
    
    with open(output_file, "w", encoding="utf-8") as f:
        f.write("\n".join(markdown_content))
    
    print(f"✅ Processing complete!")
    print(f"📁 Report saved to: {output_file}")
    print(f"📊 Processed {len(docs)} files")
    print(f"📝 Generated {len(markdown_content)} lines of markdown")
    
    return output_file

if __name__ == "__main__":
    create_markdown_report()